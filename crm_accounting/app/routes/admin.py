# app/routes/admin.py
from fastapi import APIRouter, Depends, HTTPException, Body, Request
from fastapi.responses import JSONResponse, HTMLResponse
from sqlalchemy.orm import Session
import logging

from app.core.database import get_main_db
from app.models.main_db import ClientOrganization, ClientUser
from app.managers.client_db_manager import client_db_manager
from app.services.user_service import UserService
from app.utils import templates

logger = logging.getLogger(__name__)
router = APIRouter()


# ------------------------------------------------------
# (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
# ------------------------------------------------------
@router.get("/dashboard", response_class=HTMLResponse)
async def admin_dashboard(request: Request):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-—à–∞–±–ª–æ–Ω –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–µ—Å–ª–∏ –∑–∞—Ö–æ–¥–∏—Ç–µ –Ω–∞ /api/admin/dashboard)."""
    return templates.TemplateResponse("admin/dashboard.html", {"request": request})


# ------------------------------------------------------
# –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ (JSON)
# ------------------------------------------------------
@router.get("/clients")
async def list_clients(
    db: Session = Depends(get_main_db),
    query: str | None = None,
    status: str | None = None
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å e-mail, —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã client_users) –∏ —Å—Ç–∞—Ç—É—Å–æ–º –ë–î.
    """
    try:
        q = db.query(ClientOrganization)
        if query:
            q = q.filter(ClientOrganization.company_name.ilike(f"%{query}%"))

        orgs = q.order_by(ClientOrganization.id.desc()).all()
        logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(orgs)}")

        result = []
        for org in orgs:
            has_db = bool(org.database_name)
            if status == "has_db" and not has_db:
                continue
            if status == "no_db" and has_db:
                continue

            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-¬´–≤–ª–∞–¥–µ–ª—å—Ü–∞¬ª –∏–∑ client_users (–æ—Å–Ω–æ–≤–Ω–∞—è –ë–î)
            client_user = (
                db.query(ClientUser)
                .filter(ClientUser.client_organization_id == org.id)
                .order_by(ClientUser.id.asc())
                .first()
            )

            email = getattr(client_user, "email", None) if client_user else None
            phone = getattr(client_user, "phone", None) if client_user else None

            result.append({
                "id": org.id,
                "company_name": org.company_name or "‚Äî",
                "email": email or "‚Äî",
                "phone": phone or "‚Äî",
                "profile_name": "–í–ª–∞–¥–µ–ª–µ—Ü",
                "database_name": org.database_name or "–ù–µ —Å–æ–∑–¥–∞–Ω–∞",
                "is_active": True,
                "client_organization_id": org.id
            })

        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")


# ------------------------------------------------------
# ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (–∏–∑ —Ñ–æ—Ä–º—ã –Ω–∞ index.html)
# ------------------------------------------------------
@router.post("/clients")
async def create_client_organization(
    data: dict = Body(...),
    db: Session = Depends(get_main_db)
):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞: —Å–æ–∑–¥–∞—ë—Ç ClientOrganization, —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–≤–ª–∞–¥–µ–ª—å—Ü–∞
    –≤ client_users –∏ (–ø–æ —Ñ–ª–∞–≥—É) —Å–æ–∑–¥–∞—ë—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –ë–î.

    –û–∂–∏–¥–∞–µ–º—ã–π payload (—Å–º. index.html -> handleRegister()):
    {
        "email": "...",           # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
        "phone": "...",           # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
        "contact_person": "...",  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ (–§–ò–û)
        "login": "...",           # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
        "password": "...",        # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
        "company_name": "...",    # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        "create_database": true   # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    }
    """
    try:
        email = (data.get("email") or "").strip()
        phone = (data.get("phone") or "").strip()
        contact_person = (data.get("contact_person") or "").strip()
        login = (data.get("login") or "").strip()
        password = (data.get("password") or "").strip()
        company_name = (data.get("company_name") or "").strip()
        create_db_flag = bool(data.get("create_database", False))

        # –ë—ç–∫–µ–Ω–¥-–≤–∞–ª–∏–¥–∞—Ü–∏—è
        if not email:
            raise HTTPException(status_code=400, detail="–ù–µ —É–∫–∞–∑–∞–Ω email.")
        if not phone:
            raise HTTPException(status_code=400, detail="–ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–ª–µ—Ñ–æ–Ω.")
        if not contact_person:
            raise HTTPException(status_code=400, detail="–ù–µ —É–∫–∞–∑–∞–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ.")
        if not login or not password:
            raise HTTPException(status_code=400, detail="–ù–µ —É–∫–∞–∑–∞–Ω –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")

        # 1) –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞ (ClientOrganization) –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
        client_org = UserService.create_client_organization(
            db=db,
            company_name=company_name or contact_person,  # –µ—Å–ª–∏ –Ω–µ—Ç –∏–º–µ–Ω–∏ –∫–æ–º–ø–∞–Ω–∏–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –§–ò–û
            notes=None
        )

        # 2) –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î (client_users)
        UserService.create_client_user(
            db=db,
            client_organization_id=client_org.id,
            email=email,
            login=login,
            password=password,
            full_name=contact_person or login,
            phone=phone
        )

        # 3) –ü–æ —Ñ–ª–∞–≥—É —Å–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –ë–î (client_{id})
        created_db_name = None
        if create_db_flag:
            created_db_name = client_db_manager.create_client_database(
                client_org, database_name=client_org.database_name or f"client_{client_org.id}"
            )
            client_org.database_name = created_db_name
            db.commit()

        logger.info(
            f"‚úÖ –ö–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: id={client_org.id}, "
            f"company='{client_org.company_name}', db='{client_org.database_name}'"
        )

        return JSONResponse(
            {
                "success": True,
                "message": "–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.",
                "client_id": client_org.id,
                "database_name": created_db_name or client_org.database_name
            },
            status_code=201
        )

    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")


# ------------------------------------------------------
# –°–æ–∑–¥–∞–Ω–∏–µ –ë–î –∫–ª–∏–µ–Ω—Ç–∞ –≤—Ä—É—á–Ω—É—é (–∏–∑ –∞–¥–º–∏–Ω–∫–∏)
# ------------------------------------------------------
@router.post("/clients/{client_id}/create-database")
async def create_database_for_client(client_id: int, db: Session = Depends(get_main_db)):
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
    client = db.query(ClientOrganization).filter(ClientOrganization.id == client_id).first()
    if not client:
        raise HTTPException(status_code=404, detail="–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    try:
        created = client_db_manager.create_client_database(
            client, database_name=client.database_name or f"client_{client.id}"
        )
        client.database_name = created
        db.commit()
        return {"success": True, "message": f"–ë–∞–∑–∞ {created} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"}
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î: {e}")


# ------------------------------------------------------
# –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
# ------------------------------------------------------
@router.delete("/clients/{client_id}")
async def delete_client(client_id: int, db: Session = Depends(get_main_db)):
    """–£–¥–∞–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î (ClientOrganization + –∫–∞—Å–∫–∞–¥, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)."""
    client = db.query(ClientOrganization).filter(ClientOrganization.id == client_id).first()
    if not client:
        raise HTTPException(status_code=404, detail="–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    db.delete(client)
    db.commit()
    return {"success": True, "message": f"–ö–ª–∏–µ–Ω—Ç {client.company_name} —É–¥–∞–ª—ë–Ω"}
